
range(a,b) := (
    l : [], 
    for i from a thru b do (
        l : append(l, [i])
    ), 
    l
)$
enable_random() := set_random_state(make_random_state(true))$
rand(a,b):= (
    enable_random(), 
    random(b - a + 1) + a
)$
rand_sign(a,b) := (
    enable_random(),
    totalRange: append(range(a,b), range(-b,-a)),
    index: random((b-a + 1) * 2 + 1),
    totalRange[rand(1,b-a) * 2]
)$
coeffs(p,x,n) := (
    p: expand(p), 
    map(lambda([i], coeff(p,x,i)), range(0, hipow(p,x)))[n + 1]
)$

lead_coeff(p,x) := (
    p: expand(p),
    coeffs(p, x, hipow(p,x))
)$

/** Returns a list which terms of the answer are correct. **/
correct_terms(ans, sol) := (
    if (reveal(sol, 1) # Sum(length(args(sol))) or reveal(ans, 1) # Sum(length(args(ans)))) then
        error("Solution and ans must be a sum of terms."),
    map(lambda([u], member(u, args(sol))), args(ans))
)$

rationalize_numbers(expression) ::= block(
    [ratprint : false, simp : false], 
    scanmap(lambda([e], if floatnump(e) or bfloatp(e) then ratdisrep(rat(e)) else e), expression)
)$

